{"version":3,"file":"bleClient.js","sourceRoot":"","sources":["../../src/bleClient.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\r\nimport { Capacitor } from '@capacitor/core';\r\n\r\nimport type { DisplayStrings } from './config';\r\nimport { dataViewToHexString, hexStringToDataView } from './conversion';\r\nimport type {\r\n  BleDevice,\r\n  BleService,\r\n  ConnectionPriority,\r\n  Data,\r\n  InitializeOptions,\r\n  ReadResult,\r\n  RequestBleDeviceOptions,\r\n  ScanResult,\r\n  ScanResultInternal,\r\n  TimeoutOptions,\r\n} from './definitions';\r\nimport { BluetoothLe } from './plugin';\r\nimport { getQueue } from './queue';\r\nimport { parseUUID } from './validators';\r\n\r\nexport interface BleClientInterface {\r\n  /**\r\n   * Initialize Bluetooth Low Energy (BLE). If it fails, BLE might be unavailable on this device.\r\n   * On **Android** it will ask for the location permission. On **iOS** it will ask for the Bluetooth permission.\r\n   * For an example, see [usage](#usage).\r\n   */\r\n  initialize(options?: InitializeOptions): Promise<void>;\r\n\r\n  /**\r\n   * Reports whether Bluetooth is enabled on this device.\r\n   * Always returns `true` on **web**.\r\n   */\r\n  isEnabled(): Promise<boolean>;\r\n\r\n  /**\r\n   * Request enabling Bluetooth. Show a system activity that allows the user to turn on Bluetooth. See https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#ACTION_REQUEST_ENABLE\r\n   * Only available on **Android**.*/\r\n  requestEnable(): Promise<void>;\r\n\r\n  /**\r\n   * Enable Bluetooth.\r\n   * Only available on **Android**.\r\n   * **Deprecated** Will fail on Android SDK >= 33. Use `requestEnable` instead. See https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#enable()\r\n   * @deprecated Will fail on Android SDK >= 33. Use `requestEnable` instead. See https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#enable()\r\n   */\r\n  enable(): Promise<void>;\r\n\r\n  /**\r\n   * Disable Bluetooth.\r\n   * Only available on **Android**.\r\n   * **Deprecated** Will fail on Android SDK >= 33. See https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#disable()\r\n   * @deprecated Will fail on Android SDK >= 33. See https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#disable()\r\n   */\r\n  disable(): Promise<void>;\r\n\r\n  /**\r\n   * Register a callback function that will be invoked when Bluetooth is enabled (true) or disabled (false) on this device.\r\n   * Not available on **web** (the callback will never be invoked).\r\n   * @param callback Callback function to use when the Bluetooth state changes.\r\n   */\r\n  startEnabledNotifications(callback: (value: boolean) => void): Promise<void>;\r\n\r\n  /**\r\n   * Stop the enabled notifications registered with `startEnabledNotifications`.\r\n   */\r\n  stopEnabledNotifications(): Promise<void>;\r\n\r\n  /**\r\n   * Reports whether Location Services are enabled on this device.\r\n   * Only available on **Android**.\r\n   */\r\n  isLocationEnabled(): Promise<boolean>;\r\n\r\n  /**\r\n   * Open Location settings.\r\n   * Only available on **Android**.\r\n   */\r\n  openLocationSettings(): Promise<void>;\r\n\r\n  /**\r\n   * Open Bluetooth settings.\r\n   * Only available on **Android**.\r\n   */\r\n  openBluetoothSettings(): Promise<void>;\r\n\r\n  /**\r\n   * Open App settings.\r\n   * Not available on **web**.\r\n   * On **iOS** when a user declines the request to use Bluetooth on the first call of `initialize`, it is not possible\r\n   * to request for Bluetooth again from within the app. In this case Bluetooth has to be enabled in the app settings\r\n   * for the app to be able use it.\r\n   */\r\n  openAppSettings(): Promise<void>;\r\n\r\n  /**\r\n   * Set the strings that are displayed in the `requestDevice` dialog.\r\n   * @param displayStrings\r\n   */\r\n  setDisplayStrings(displayStrings: DisplayStrings): Promise<void>;\r\n\r\n  /**\r\n   * Request a peripheral BLE device to interact with. This will scan for available devices according to the filters in the options and show a dialog to pick a device.\r\n   * For an example, see [usage](#usage).\r\n   * @param options Device filters, see [RequestBleDeviceOptions](#RequestBleDeviceOptions)\r\n   */\r\n  requestDevice(options?: RequestBleDeviceOptions): Promise<BleDevice>;\r\n\r\n  /**\r\n   * Start scanning for BLE devices to interact with according to the filters in the options. The callback will be invoked on each device that is found.\r\n   * Scanning will continue until `stopLEScan` is called. For an example, see [usage](#usage).\r\n   * **Note**: Use with care on **web** platform, the required API is still behind a flag in most browsers.\r\n   * @param options\r\n   * @param callback\r\n   */\r\n  requestLEScan(options: RequestBleDeviceOptions, callback: (result: ScanResult) => void): Promise<void>;\r\n\r\n  /**\r\n   * Stop scanning for BLE devices. For an example, see [usage](#usage).\r\n   */\r\n  stopLEScan(): Promise<void>;\r\n\r\n  /**\r\n   * On iOS and web, if you want to connect to a previously connected device without scanning first, you can use `getDevice`.\r\n   * Uses [retrievePeripherals](https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/1519127-retrieveperipherals) on iOS and\r\n   * [getDevices](https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth/getDevices) on web.\r\n   * On Android, you can directly connect to the device with the deviceId.\r\n   * @param deviceIds List of device IDs, e.g. saved from a previous app run.\r\n   */\r\n  getDevices(deviceIds: string[]): Promise<BleDevice[]>;\r\n\r\n  /**\r\n   * Get a list of currently bonded devices.\r\n   * Only available on **Android**.\r\n   * Uses [getBondedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#getBondedDevices()) on Android\r\n   */\r\n  getBondedDevices(): Promise<BleDevice[]>;\r\n\r\n  /**\r\n   * Get a list of currently connected devices.\r\n   * Uses [retrieveConnectedPeripherals](https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/1518924-retrieveconnectedperipherals) on iOS,\r\n   * [getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothManager#getConnectedDevices(int)) on Android\r\n   * and [getDevices](https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth/getDevices) on web.\r\n   * @param services List of services to filter the devices by. If no service is specified, no devices will be returned. Only applies to iOS.\r\n   */\r\n  getConnectedDevices(services: string[]): Promise<BleDevice[]>;\r\n\r\n  /**\r\n   * Connect to a peripheral BLE device. For an example, see [usage](#usage).\r\n   * @param deviceId  The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\r\n   * @param onDisconnect Optional disconnect callback function that will be used when the device disconnects\r\n   * @param options Options for plugin call\r\n   */\r\n  connect(deviceId: string, onDisconnect?: (deviceId: string) => void, options?: TimeoutOptions): Promise<void>;\r\n\r\n  /**\r\n   * Create a bond with a peripheral BLE device.\r\n   * Only available on **Android**. On iOS bonding is handled by the OS.\r\n   * @param deviceId  The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\r\n   * @param options Options for plugin call\r\n   */\r\n  createBond(deviceId: string, options?: TimeoutOptions): Promise<void>;\r\n\r\n  /**\r\n   * Report whether a peripheral BLE device is bonded.\r\n   * Only available on **Android**. On iOS bonding is handled by the OS.\r\n   * @param deviceId  The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\r\n   */\r\n  isBonded(deviceId: string): Promise<boolean>;\r\n\r\n  /**\r\n   * Disconnect from a peripheral BLE device. For an example, see [usage](#usage).\r\n   * @param deviceId  The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\r\n   */\r\n  disconnect(deviceId: string): Promise<void>;\r\n\r\n  /**\r\n   * Get services, characteristics and descriptors of a device.\r\n   * @param deviceId  The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\r\n   */\r\n  getServices(deviceId: string): Promise<BleService[]>;\r\n\r\n  /**\r\n   * Discover services, characteristics and descriptors of a device.\r\n   * You only need this method if your peripheral device changes its services and characteristics at runtime.\r\n   * If the discovery was successful, the remote services can be retrieved using the getServices function.\r\n   * Not available on **web**.\r\n   * @param deviceId  The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\r\n   */\r\n  discoverServices(deviceId: string): Promise<void>;\r\n\r\n  /**\r\n   * Get the MTU of a connected device. Note that the maximum write value length is 3 bytes less than the MTU.\r\n   * Not available on **web**.\r\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\r\n   */\r\n  getMtu(deviceId: string): Promise<number>;\r\n\r\n  /**\r\n   * Request a connection parameter update.\r\n   * Only available on **Android**. https://developer.android.com/reference/android/bluetooth/BluetoothGatt#requestConnectionPriority(int)\r\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\r\n   * @param connectionPriority Request a specific connection priority. See [ConnectionPriority](#connectionpriority)\r\n   */\r\n  requestConnectionPriority(deviceId: string, connectionPriority: ConnectionPriority): Promise<void>;\r\n\r\n  /**\r\n   * Read the RSSI value of a connected device.\r\n   * Not available on **web**.\r\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\r\n   */\r\n  readRssi(deviceId: string): Promise<number>;\r\n\r\n  /**\r\n   * Read the value of a characteristic. For an example, see [usage](#usage).\r\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\r\n   * @param service UUID of the service (see [UUID format](#uuid-format))\r\n   * @param characteristic UUID of the characteristic (see [UUID format](#uuid-format))\r\n   * @param options Options for plugin call\r\n   */\r\n  read(deviceId: string, service: string, characteristic: string, options?: TimeoutOptions): Promise<DataView>;\r\n\r\n  /**\r\n   * Write a value to a characteristic. For an example, see [usage](#usage).\r\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\r\n   * @param service UUID of the service (see [UUID format](#uuid-format))\r\n   * @param characteristic UUID of the characteristic (see [UUID format](#uuid-format))\r\n   * @param value The value to write as a DataView. To create a DataView from an array of numbers, there is a helper function, e.g. numbersToDataView([1, 0])\r\n   * @param options Options for plugin call\r\n   */\r\n  write(\r\n    deviceId: string,\r\n    service: string,\r\n    characteristic: string,\r\n    value: DataView,\r\n    options?: TimeoutOptions,\r\n  ): Promise<void>;\r\n\r\n  /**\r\n   * Write a value to a characteristic without waiting for a response.\r\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\r\n   * @param service UUID of the service (see [UUID format](#uuid-format))\r\n   * @param characteristic UUID of the characteristic (see [UUID format](#uuid-format))\r\n   * @param value The value to write as a DataView. To create a DataView from an array of numbers, there is a helper function, e.g. numbersToDataView([1, 0])\r\n   * @param options Options for plugin call\r\n   */\r\n  writeWithoutResponse(\r\n    deviceId: string,\r\n    service: string,\r\n    characteristic: string,\r\n    value: DataView,\r\n    options?: TimeoutOptions,\r\n  ): Promise<void>;\r\n\r\n  /**\r\n   * Read the value of a descriptor.\r\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\r\n   * @param service UUID of the service (see [UUID format](#uuid-format))\r\n   * @param characteristic UUID of the characteristic (see [UUID format](#uuid-format))\r\n   * @param descriptor UUID of the descriptor (see [UUID format](#uuid-format))\r\n   * @param options Options for plugin call\r\n   */\r\n  readDescriptor(\r\n    deviceId: string,\r\n    service: string,\r\n    characteristic: string,\r\n    descriptor: string,\r\n    options?: TimeoutOptions,\r\n  ): Promise<DataView>;\r\n\r\n  /**\r\n   * Write a value to a descriptor.\r\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\r\n   * @param service UUID of the service (see [UUID format](#uuid-format))\r\n   * @param characteristic UUID of the characteristic (see [UUID format](#uuid-format))\r\n   * @param descriptor UUID of the descriptor (see [UUID format](#uuid-format))\r\n   * @param value The value to write as a DataView. To create a DataView from an array of numbers, there is a helper function, e.g. numbersToDataView([1, 0])\r\n   * @param options Options for plugin call\r\n   */\r\n  writeDescriptor(\r\n    deviceId: string,\r\n    service: string,\r\n    characteristic: string,\r\n    descriptor: string,\r\n    value: DataView,\r\n    options?: TimeoutOptions,\r\n  ): Promise<void>;\r\n\r\n  /**\r\n   * Start listening to changes of the value of a characteristic.\r\n   * Note that you should only start the notifications once per characteristic in your app and share the data and\r\n   * not call `startNotifications` in every component that needs the data.\r\n   * For an example, see [usage](#usage).\r\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\r\n   * @param service UUID of the service (see [UUID format](#uuid-format))\r\n   * @param characteristic UUID of the characteristic (see [UUID format](#uuid-format))\r\n   * @param callback Callback function to use when the value of the characteristic changes\r\n   */\r\n  startNotifications(\r\n    deviceId: string,\r\n    service: string,\r\n    characteristic: string,\r\n    callback: (value: DataView) => void,\r\n  ): Promise<void>;\r\n\r\n  /**\r\n   * Stop listening to the changes of the value of a characteristic. For an example, see [usage](#usage).\r\n   * @param deviceId The ID of the device to use (obtained from [requestDevice](#requestDevice) or [requestLEScan](#requestLEScan))\r\n   * @param service UUID of the service (see [UUID format](#uuid-format))\r\n   * @param characteristic UUID of the characteristic (see [UUID format](#uuid-format))\r\n   */\r\n  stopNotifications(deviceId: string, service: string, characteristic: string): Promise<void>;\r\n}\r\n\r\nclass BleClientClass implements BleClientInterface {\r\n  private scanListener: PluginListenerHandle | null = null;\r\n  private eventListeners = new Map<string, PluginListenerHandle>();\r\n  private queue = getQueue(true);\r\n\r\n  enableQueue() {\r\n    this.queue = getQueue(true);\r\n  }\r\n\r\n  disableQueue() {\r\n    this.queue = getQueue(false);\r\n  }\r\n\r\n  async initialize(options?: InitializeOptions): Promise<void> {\r\n    await this.queue(async () => {\r\n      await BluetoothLe.initialize(options);\r\n    });\r\n  }\r\n\r\n  async isEnabled(): Promise<boolean> {\r\n    const enabled = await this.queue(async () => {\r\n      const result = await BluetoothLe.isEnabled();\r\n      return result.value;\r\n    });\r\n    return enabled;\r\n  }\r\n\r\n  async requestEnable(): Promise<void> {\r\n    await this.queue(async () => {\r\n      await BluetoothLe.requestEnable();\r\n    });\r\n  }\r\n\r\n  async enable(): Promise<void> {\r\n    await this.queue(async () => {\r\n      await BluetoothLe.enable();\r\n    });\r\n  }\r\n\r\n  async disable(): Promise<void> {\r\n    await this.queue(async () => {\r\n      await BluetoothLe.disable();\r\n    });\r\n  }\r\n\r\n  async startEnabledNotifications(callback: (value: boolean) => void): Promise<void> {\r\n    await this.queue(async () => {\r\n      const key = `onEnabledChanged`;\r\n      await this.eventListeners.get(key)?.remove();\r\n      const listener = await BluetoothLe.addListener(key, (result) => {\r\n        callback(result.value);\r\n      });\r\n      this.eventListeners.set(key, listener);\r\n      await BluetoothLe.startEnabledNotifications();\r\n    });\r\n  }\r\n\r\n  async stopEnabledNotifications(): Promise<void> {\r\n    await this.queue(async () => {\r\n      const key = `onEnabledChanged`;\r\n      await this.eventListeners.get(key)?.remove();\r\n      this.eventListeners.delete(key);\r\n      await BluetoothLe.stopEnabledNotifications();\r\n    });\r\n  }\r\n\r\n  async isLocationEnabled(): Promise<boolean> {\r\n    const enabled = await this.queue(async () => {\r\n      const result = await BluetoothLe.isLocationEnabled();\r\n      return result.value;\r\n    });\r\n    return enabled;\r\n  }\r\n\r\n  async openLocationSettings(): Promise<void> {\r\n    await this.queue(async () => {\r\n      await BluetoothLe.openLocationSettings();\r\n    });\r\n  }\r\n\r\n  async openBluetoothSettings(): Promise<void> {\r\n    await this.queue(async () => {\r\n      await BluetoothLe.openBluetoothSettings();\r\n    });\r\n  }\r\n\r\n  async openAppSettings(): Promise<void> {\r\n    await this.queue(async () => {\r\n      await BluetoothLe.openAppSettings();\r\n    });\r\n  }\r\n\r\n  async setDisplayStrings(displayStrings: DisplayStrings): Promise<void> {\r\n    await this.queue(async () => {\r\n      await BluetoothLe.setDisplayStrings(displayStrings);\r\n    });\r\n  }\r\n\r\n  async requestDevice(options?: RequestBleDeviceOptions): Promise<BleDevice> {\r\n    options = options ? this.validateRequestBleDeviceOptions(options) : undefined;\r\n    const result = await this.queue(async () => {\r\n      const device = await BluetoothLe.requestDevice(options);\r\n      return device;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  async requestLEScan(options: RequestBleDeviceOptions, callback: (result: ScanResult) => void): Promise<void> {\r\n    options = this.validateRequestBleDeviceOptions(options);\r\n    await this.queue(async () => {\r\n      await this.scanListener?.remove();\r\n      this.scanListener = await BluetoothLe.addListener('onScanResult', (resultInternal: ScanResultInternal) => {\r\n        const result: ScanResult = {\r\n          ...resultInternal,\r\n          manufacturerData: this.convertObject(resultInternal.manufacturerData),\r\n          serviceData: this.convertObject(resultInternal.serviceData),\r\n          rawAdvertisement: resultInternal.rawAdvertisement\r\n            ? this.convertValue(resultInternal.rawAdvertisement)\r\n            : undefined,\r\n        };\r\n        callback(result);\r\n      });\r\n      await BluetoothLe.requestLEScan(options);\r\n    });\r\n  }\r\n\r\n  async stopLEScan(): Promise<void> {\r\n    await this.queue(async () => {\r\n      await this.scanListener?.remove();\r\n      this.scanListener = null;\r\n      await BluetoothLe.stopLEScan();\r\n    });\r\n  }\r\n\r\n  async getDevices(deviceIds: string[]): Promise<BleDevice[]> {\r\n    if (!Array.isArray(deviceIds)) {\r\n      throw new Error('deviceIds must be an array');\r\n    }\r\n    return this.queue(async () => {\r\n      const result = await BluetoothLe.getDevices({ deviceIds });\r\n      return result.devices;\r\n    });\r\n  }\r\n\r\n  async getConnectedDevices(services: string[]): Promise<BleDevice[]> {\r\n    if (!Array.isArray(services)) {\r\n      throw new Error('services must be an array');\r\n    }\r\n    services = services.map(parseUUID);\r\n    return this.queue(async () => {\r\n      const result = await BluetoothLe.getConnectedDevices({ services });\r\n      return result.devices;\r\n    });\r\n  }\r\n\r\n  async getBondedDevices(): Promise<BleDevice[]> {\r\n    return this.queue(async () => {\r\n      const result = await BluetoothLe.getBondedDevices();\r\n      return result.devices;\r\n    });\r\n  }\r\n\r\n  async connect(deviceId: string, onDisconnect?: (deviceId: string) => void, options?: TimeoutOptions): Promise<void> {\r\n    await this.queue(async () => {\r\n      if (onDisconnect) {\r\n        const key = `disconnected|${deviceId}`;\r\n        await this.eventListeners.get(key)?.remove();\r\n        const listener = await BluetoothLe.addListener(key, () => {\r\n          onDisconnect(deviceId);\r\n        });\r\n        this.eventListeners.set(key, listener);\r\n      }\r\n      await BluetoothLe.connect({ deviceId, ...options });\r\n    });\r\n  }\r\n\r\n  async createBond(deviceId: string, options?: TimeoutOptions): Promise<void> {\r\n    await this.queue(async () => {\r\n      await BluetoothLe.createBond({ deviceId, ...options });\r\n    });\r\n  }\r\n\r\n  async isBonded(deviceId: string): Promise<boolean> {\r\n    const isBonded = await this.queue(async () => {\r\n      const result = await BluetoothLe.isBonded({ deviceId });\r\n      return result.value;\r\n    });\r\n    return isBonded;\r\n  }\r\n\r\n  async disconnect(deviceId: string): Promise<void> {\r\n    await this.queue(async () => {\r\n      await BluetoothLe.disconnect({ deviceId });\r\n    });\r\n  }\r\n\r\n  async getServices(deviceId: string): Promise<BleService[]> {\r\n    const services = await this.queue(async () => {\r\n      const result = await BluetoothLe.getServices({ deviceId });\r\n      return result.services;\r\n    });\r\n    return services;\r\n  }\r\n\r\n  async discoverServices(deviceId: string): Promise<void> {\r\n    await this.queue(async () => {\r\n      await BluetoothLe.discoverServices({ deviceId });\r\n    });\r\n  }\r\n\r\n  async getMtu(deviceId: string): Promise<number> {\r\n    const value = await this.queue(async () => {\r\n      const result = await BluetoothLe.getMtu({ deviceId });\r\n      return result.value;\r\n    });\r\n    return value;\r\n  }\r\n\r\n  async requestConnectionPriority(deviceId: string, connectionPriority: ConnectionPriority): Promise<void> {\r\n    await this.queue(async () => {\r\n      await BluetoothLe.requestConnectionPriority({ deviceId, connectionPriority });\r\n    });\r\n  }\r\n\r\n  async readRssi(deviceId: string): Promise<number> {\r\n    const value = await this.queue(async () => {\r\n      const result = await BluetoothLe.readRssi({ deviceId });\r\n      return parseFloat(result.value);\r\n    });\r\n    return value;\r\n  }\r\n\r\n  async read(deviceId: string, service: string, characteristic: string, options?: TimeoutOptions): Promise<DataView> {\r\n    service = parseUUID(service);\r\n    characteristic = parseUUID(characteristic);\r\n    const value = await this.queue(async () => {\r\n      const result = await BluetoothLe.read({\r\n        deviceId,\r\n        service,\r\n        characteristic,\r\n        ...options,\r\n      });\r\n      return this.convertValue(result.value);\r\n    });\r\n    return value;\r\n  }\r\n\r\n  async write(\r\n    deviceId: string,\r\n    service: string,\r\n    characteristic: string,\r\n    value: DataView,\r\n    options?: TimeoutOptions,\r\n  ): Promise<void> {\r\n    service = parseUUID(service);\r\n    characteristic = parseUUID(characteristic);\r\n    return this.queue(async () => {\r\n      if (!value?.buffer) {\r\n        throw new Error('Invalid data.');\r\n      }\r\n      let writeValue: DataView | string = value;\r\n      if (Capacitor.getPlatform() !== 'web') {\r\n        // on native we can only write strings\r\n        writeValue = dataViewToHexString(value);\r\n      }\r\n      await BluetoothLe.write({\r\n        deviceId,\r\n        service,\r\n        characteristic,\r\n        value: writeValue,\r\n        ...options,\r\n      });\r\n    });\r\n  }\r\n\r\n  async writeWithoutResponse(\r\n    deviceId: string,\r\n    service: string,\r\n    characteristic: string,\r\n    value: DataView,\r\n    options?: TimeoutOptions,\r\n  ): Promise<void> {\r\n    service = parseUUID(service);\r\n    characteristic = parseUUID(characteristic);\r\n    await this.queue(async () => {\r\n      if (!value?.buffer) {\r\n        throw new Error('Invalid data.');\r\n      }\r\n      let writeValue: DataView | string = value;\r\n      if (Capacitor.getPlatform() !== 'web') {\r\n        // on native we can only write strings\r\n        writeValue = dataViewToHexString(value);\r\n      }\r\n      await BluetoothLe.writeWithoutResponse({\r\n        deviceId,\r\n        service,\r\n        characteristic,\r\n        value: writeValue,\r\n        ...options,\r\n      });\r\n    });\r\n  }\r\n\r\n  async readDescriptor(\r\n    deviceId: string,\r\n    service: string,\r\n    characteristic: string,\r\n    descriptor: string,\r\n    options?: TimeoutOptions,\r\n  ): Promise<DataView> {\r\n    service = parseUUID(service);\r\n    characteristic = parseUUID(characteristic);\r\n    descriptor = parseUUID(descriptor);\r\n    const value = await this.queue(async () => {\r\n      const result = await BluetoothLe.readDescriptor({\r\n        deviceId,\r\n        service,\r\n        characteristic,\r\n        descriptor,\r\n        ...options,\r\n      });\r\n      return this.convertValue(result.value);\r\n    });\r\n    return value;\r\n  }\r\n\r\n  async writeDescriptor(\r\n    deviceId: string,\r\n    service: string,\r\n    characteristic: string,\r\n    descriptor: string,\r\n    value: DataView,\r\n    options?: TimeoutOptions,\r\n  ): Promise<void> {\r\n    service = parseUUID(service);\r\n    characteristic = parseUUID(characteristic);\r\n    descriptor = parseUUID(descriptor);\r\n    return this.queue(async () => {\r\n      if (!value?.buffer) {\r\n        throw new Error('Invalid data.');\r\n      }\r\n      let writeValue: DataView | string = value;\r\n      if (Capacitor.getPlatform() !== 'web') {\r\n        // on native we can only write strings\r\n        writeValue = dataViewToHexString(value);\r\n      }\r\n      await BluetoothLe.writeDescriptor({\r\n        deviceId,\r\n        service,\r\n        characteristic,\r\n        descriptor,\r\n        value: writeValue,\r\n        ...options,\r\n      });\r\n    });\r\n  }\r\n\r\n  async startNotifications(\r\n    deviceId: string,\r\n    service: string,\r\n    characteristic: string,\r\n    callback: (value: DataView) => void,\r\n  ): Promise<void> {\r\n    service = parseUUID(service);\r\n    characteristic = parseUUID(characteristic);\r\n    await this.queue(async () => {\r\n      const key = `notification|${deviceId}|${service}|${characteristic}`;\r\n      await this.eventListeners.get(key)?.remove();\r\n      const listener = await BluetoothLe.addListener(key, (event: ReadResult) => {\r\n        callback(this.convertValue(event?.value));\r\n      });\r\n      this.eventListeners.set(key, listener);\r\n      await BluetoothLe.startNotifications({\r\n        deviceId,\r\n        service,\r\n        characteristic,\r\n      });\r\n    });\r\n  }\r\n\r\n  async stopNotifications(deviceId: string, service: string, characteristic: string): Promise<void> {\r\n    service = parseUUID(service);\r\n    characteristic = parseUUID(characteristic);\r\n    await this.queue(async () => {\r\n      const key = `notification|${deviceId}|${service}|${characteristic}`;\r\n      await this.eventListeners.get(key)?.remove();\r\n      this.eventListeners.delete(key);\r\n      await BluetoothLe.stopNotifications({\r\n        deviceId,\r\n        service,\r\n        characteristic,\r\n      });\r\n    });\r\n  }\r\n\r\n  private validateRequestBleDeviceOptions(options: RequestBleDeviceOptions): RequestBleDeviceOptions {\r\n    if (options.services) {\r\n      options.services = options.services.map(parseUUID);\r\n    }\r\n    if (options.optionalServices) {\r\n      options.optionalServices = options.optionalServices.map(parseUUID);\r\n    }\r\n    return options;\r\n  }\r\n\r\n  private convertValue(value?: Data): DataView {\r\n    if (typeof value === 'string') {\r\n      return hexStringToDataView(value);\r\n    } else if (value === undefined) {\r\n      return new DataView(new ArrayBuffer(0));\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private convertObject(obj?: { [key: string]: Data }): { [key: string]: DataView } | undefined {\r\n    if (obj === undefined) {\r\n      return undefined;\r\n    }\r\n    const result: { [key: string]: DataView } = {};\r\n    for (const key of Object.keys(obj)) {\r\n      result[key] = this.convertValue(obj[key]);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport const BleClient = new BleClientClass();\r\n"]}